SELECT EMPLOYEE_ID
	,  FIRST_NAME || ' ' || LAST_NAME AS NAME
	,  SALARY
	,  HIRE_DATE
	FROM EMPLOYEES
	WHERE COMMISSION_PCT IS NULL
	ORDER BY NAME;		-- NAME 을 기준으로 오름차순 정렬

	
SELECT EMPLOYEE_ID
	,  FIRST_NAME || ' ' || LAST_NAME AS NAME
	,  SALARY
	,  HIRE_DATE
	FROM EMPLOYEES
	WHERE COMMISSION_PCT IS NULL 
	ORDER BY SALARY DESC, NAME NULLS FIRST;	
	-- SALARY 를 기준으로 내림차순 정렬. 급여가 같으면 이름을 기준으로 오름차순 정렬
	-- NULL 데이터를 먼저 보여줌
	

SELECT EMPLOYEE_ID
	,  FIRST_NAME || ' ' || LAST_NAME AS NAME
	,  SALARY
	,  COMMISSION_PCT
	,  HIRE_DATE
	FROM EMPLOYEES
	ORDER BY 4 NULLS FIRST;	-- 4 번째 컬럼에 대해 NULL 데이터를 먼저 보여줌
	
	
SELECT EMPLOYEE_ID
	,  FIRST_NAME || ' ' || LAST_NAME AS NAME
	,  SALARY
	,  COMMISSION_PCT
	,  HIRE_DATE
	FROM EMPLOYEES
	ORDER BY SALARY, 4 NULL LAST;	-- 급여 순으로 정렬, 4 번쨰 컬럼에 대한 NULL 데이터를 뒤로 보냄
	
	
	
	

-- 중복 제거
SELECT DISTINCT DEPARTMENT_ID
	FROM EMPLOYEES;
	
	
-- 부서별로 묶어서 출력
SELECT DEPARTMENT_ID
	,  MIN(SALARY)
	,  MAX(SALARY)
	,  AVG(SALARY)
	,  SUM(SALARY)
	,  COUNT(SALARY) 
	FROM EMPLOYEES
	GROUP BY DEPARTMENT_ID		-- 부서가 같은 것으로 묶어서 보여줌
	ORDER BY DEPARTMENT_ID;		-- DEPARTMENT_ID 를 기준으로 오름차순 정렬
	

SELECT DEPARTMENT_ID
	,  JOB_ID
	,  MIN(SALARY)
	,  MAX(SALARY)
	,  AVG(SALARY)
	,  SUM(SALARY)
	,  COUNT(SALARY)
	FROM EMPLOYEES
	GROUP BY DEPARTMENT_ID, JOB_ID	-- DEPARTMENT_ID 와 JOB_ID 가 같은 것끼리 분류
	ORDER BY DEPARTMENT_ID;			-- DEPARTMENT_ID 를 기준으로 오름차순 정렬
	

-- GROUP BY 에서 쓴 형식과 SELECT 에서 쓴 형식이 동일해야 함
SELECT EXTRACT(YEAR FROM HIRE_DATE) AS 고용년		-- EXTRACT() : 날짜 처리 함수
	,  MIN(SALARY)
	,  MAX(SALARY)
	,  AVG(SALARY)
	,  SUM(SALARY)
	,  COUNT(SALARY)
	FROM EMPLOYEES
	GROUP BY EXTRACT(YEAR FROM HIRE_DATE)		-- HIRE_DATE 의 년도를 기준으로 분류
	HAVING COUNT(SALARY) > 1;				
	-- 1 명 이하는 출력 안함
	
	
SELECT COMMISSION_PCT 
	,  MIN(SALARY) AS "최저 급여"
	,  MAX(SALARY) AS "최고 급여"
	,  AVG(SALARY) AS "평균 급여"
	,  SUM(SALARY) AS "급여 총합"
	,  COUNT(SALARY) AS "인원수"
	FROM EMPLOYEES
	WHERE COMMISSION_PCT IS NOT NULL	-- COMMISSION_PCT 가 NULL 인 경우를 제외하고 출력
	AND SALARY >= 7000					-- SALARY 가 7000 이상인 것만 출력
	GROUP BY COMMISSION_PCT				-- COMMISSION_PCT 를 기준으로 묶어서 출력
	HAVING AVG(SALARY) >= 9500			-- 평균 급여가 9500 이상인 경우만 출력 
	ORDER BY 6;							-- 6 번째 컬럼 (인원수) 를 기준으로 오름차순 정렬


SELECT COMMISSION_PCT
	,  MIN(SALARY) AS "최저 급여"
	,  MAX(SALARY) AS "최고 급여"
	,  AVG(SALARY) AS "평균 급여"
	,  SUM(SALARY) AS "급여 총합"
	,  COUNT(SALARY) AS "인원수"
	FROM EMPLOYEES
	WHERE COMMISSION_PCT IS NOT NULL	-- COMMISSION_PCT 가 NULL 인 경우를 제외하고 출력
	AND SALARY >= 7000					-- SALARY 가 7000 이상인 것만 출력
	GROUP BY COMMISSION_PCT				-- COMMISSION_PCT 를 기준으로 묶어서 출력
	HAVING AVG(SALARY) >= 9500			-- 평균 급여가 9500 이상인 것만 출력
	ORDER BY COUNT(SALARY); 			-- 인원수를 기준으로 오름차순 정렬

	
SELECT COMMISSION_PCT
	-- ,  SALARY
	FROM EMPLOYEES
	WHERE COMMISSION_PCT IS NOT NULL
	AND SALARY >= 7000
	GROUP BY COMMISSION_PCT;


/*
 * 1980 년대, 1990 년대, 2000 년대 별로 그룹을 묶어서 급여의 평균과 인원수를 구한다.
 */
SELECT TRUNC(EXTRACT(YEAR FROM HIRE_DATE), -1) AS 년대
	,  AVG(SALARY) AS 급여평균
	,  COUNT(*) AS 인원수
	FROM EMPLOYEES
	GROUP BY TRUNC(EXTRACT(YEAR FROM HIRE_DATE), -1)
	ORDER BY 년대;


/*
 * 급여 집계를 위한 그룹을 다음과 같이 묶어서 총 인원수를 구한다.
 * 		2000 ~ 3500 미만 1그룹
 * 		3500 ~ 5000 미만 2그룹
 * 		5000 ~ 8000 미만 3그룹
 * 		8000 ~ 12000 미만 4그룹
 * 		12000 이상 5그룹
 */
SELECT CASE WHEN SALARY >= 2000 AND SALARY < 3500 THEN '1그룹' 
			WHEN SALARY >= 3500 AND SALARY < 5000 THEN '2그룹'
			WHEN SALARY >= 5000 AND SALARY < 8000 THEN '3그룹'
			WHEN SALARY >= 8000 AND SALARY < 12000 THEN '4그룹'
			WHEN SALARY >= 12000 THEN '5그룹'
		END AS 그룹
	  , COUNT(*) AS 인원수 
	FROM EMPLOYEES
	GROUP BY CASE WHEN SALARY >= 2000 AND SALARY < 3500 THEN '1그룹' 
				  WHEN SALARY >= 3500 AND SALARY < 5000 THEN '2그룹'
				  WHEN SALARY >= 5000 AND SALARY < 8000 THEN '3그룹'
				  WHEN SALARY >= 8000 AND SALARY < 12000 THEN '4그룹'
				  WHEN SALARY >= 12000 THEN '5그룹'
			  END
	ORDER BY 그룹;




-- ROLLUP 과 CUBE

SELECT DEPARTMENT_ID
	,  JOB_ID
	,  SUM(SALARY)
	,  AVG(SALARY)
	,  COUNT(*)
	FROM EMPLOYEES
	WHERE DEPARTMENT_ID IS NOT NULL
	GROUP BY ROLLUP(DEPARTMENT_ID, JOB_ID);
	

SELECT DEPARTMENT_ID
	,  JOB_ID
	,  SUM(SALARY)
	,  AVG(SALARY)
	,  COUNT(*)
	FROM EMPLOYEES
	WHERE DEPARTMENT_ID IS NOT NULL
	GROUP BY CUBE(DEPARTMENT_ID, JOB_ID)
	ORDER BY DEPARTMENT_ID, JOB_ID NULL LAST;	-- NULL 을 마지막으로 배치
	

SELECT DEPARTMENT_ID
	,  JOB_ID
	,  DECODE(NVL(COMMISSION_PCT, 0), 0, 'NO', 'YES')	-- NULL 일 경우 0 으로 출력, 있으면 YES, 없으면 NO
	,  SUM(SALARY) 
	,  AVG(SALARY)
	,  COUNT(*)
	FROM EMPLOYEES
	WHERE DEPARTMENT_ID IS NOT NULL
	GROUP BY ROLLUP(DEPARTMENT_ID, JOB_ID, DECODE(NVL(COMMISSION_PCT, 0), 0, 'NO', 'YES'))
	ORDER BY DEPARTMENT_ID, JOB_ID, 3 NULLS LAST;
	


SELECT * FROM EMPLOYEES;

/*
 * 부서, 고용년도 별 급여 통계(최고 급여, 최저 급여, 평균) 를 구한다.
 * 		- ROLLUP, CUBE 를 적용하여 구한다.
 * 		- 부서가 NULL 인원이 있기 때문에 해당 인원은 제외한다.
 */

-- ROLLUP
SELECT DEPARTMENT_ID AS 부서
	,  EXTRACT(YEAR FROM HIRE_DATE) AS 고용년도
	,  MAX(SALARY) AS 최고급여
	,  MIN(SALARY) AS 최저급여
	,  AVG(SALARY) AS 평균급여
	FROM EMPLOYEES
	WHERE DEPARTMENT_ID IS NOT NULL
	GROUP BY ROLLUP(DEPARTMENT_ID, EXTRACT(YEAR FROM HIRE_DATE))
	ORDER BY DEPARTMENT_ID, 고용년도;

-- CUBE
SELECT DEPARTMENT_ID AS 부서
	,  EXTRACT(YEAR FROM HIRE_DATE) AS 고용년도
	,  MAX(SALARY) AS 최고급여
	,  MIN(SALARY) AS 최저급여
	,  AVG(SALARY) AS 평균급여
	FROM EMPLOYEES
	WHERE DEPARTMENT_ID IS NOT NULL
	GROUP BY CUBE(DEPARTMENT_ID, EXTRACT(YEAR FROM HIRE_DATE))
	ORDER BY DEPARTMENT_ID, 고용년도;
